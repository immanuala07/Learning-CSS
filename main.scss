/*
To compile the sass file, use the below code:
sass main.scss main.css

If we dont want to re-run the command then run this below command on watch mode:
sass --watch main.scss:main.css
*/

// SASS - Adding Partials
@import "_variables.scss";

@import "typography.scss";

/*
  A mixin is one or more styles grouped together,
  allowing us to reuse them multiple times throughout our stylesheet
  without rewriting the code each time.
  Mixins are typically only used for reusable styles and to modify variables.
*/
@mixin display-flex() {
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/*
  A mixin is one or more styles grouped together,
  allowing us to reuse them multiple times throughout our stylesheet
  without rewriting the code each time.
  Mixins are typically only used for reusable styles and to modify variables.
*/
@mixin media-min-width($width) {
  @media (min-width: $width) {
    @content;
  }
}

html {
  font-size: 94.75%;

  @include media-min-width(40rem) {
    font-size: 125%;
  }
}

body {
  font-family: Arial, sans-serif;
  margin: 0;
}

.container {
  @include display-flex();
  /*
  flex-direction: column;
  flex-wrap: nowrap;
  */

  // Below is the SCSS alternate syntax for the above CSS code:
  flex: {
    direction: column;
    wrap: nowrap;  
  }
  
  align-items: center;
  padding: $size-default * 3 0;
  box-sizing: border-box;
}

.sass-section {
  border: $border-default;
  // Sass built-in function
  background: lighten(map-get($colors, main), 72%);
  padding: $size-default * 2;
  text-align: center;
  width: 90%;
  box-sizing: border-box;
  
  @include media-min-width(40rem) {
    width: 30rem;
  }
}

.sass-introduction {
  @extend .sass-section;
  box-shadow: $size-tiny $size-tiny calc($size-tiny / 2) #ccc;

  p {
    margin: 0;
  }
}

.sass-details {
  @extend .sass-section;
  margin: $size-default * 2 0;
}

.section-header {
  border-bottom: $border-default;
  
  h1 {
    margin: 0 0 $size-default 0;
  }
}

.documentation-links {
  list-style: none;
  margin: $size-default 0 0 0;
  padding: 0;
  @include display-flex();
  flex-direction: column;

  li {
    margin: $size-tiny 0;
    background: white;
  }

  .documentation-link {
    text-decoration: none;
    /*
      In Sass,
      map-get is a built-in function that allows you to retrieve the value
      associated with a specific key from a map.
      Maps are collections of key-value pairs,
      and map-get helps you access the value corresponding
      to a given key within the map.
    */
    color: map-get($colors, main);
    display: block;
    padding: $size-tiny;
    border: $border-default;

    &:hover,
    &:active {
      color: white;
      /*
            In Sass,
            map-get is a built-in function that allows you to retrieve the value
            associated with a specific key from a map.
            Maps are collections of key-value pairs,
            and map-get helps you access the value corresponding
            to a given key within the map.
          */
      background: map-get($colors, secondary);
      /*
            In Sass,
            map-get is a built-in function that allows you to retrieve the value
            associated with a specific key from a map.
            Maps are collections of key-value pairs,
            and map-get helps you access the value corresponding
            to a given key within the map.
          */
      border-color: map-get($colors, secondary);
    }
  }
}
